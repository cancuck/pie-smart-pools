/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface LibPoolMathInterface extends Interface {
  functions: {
    calcPoolInGivenSingleOut: TypedFunctionDescription<{
      encode([_token, _amount]: [string, BigNumberish]): string;
    }>;

    calcPoolOutGivenSingleIn: TypedFunctionDescription<{
      encode([_token, _amount]: [string, BigNumberish]): string;
    }>;

    calcSingleInGivenPoolOut: TypedFunctionDescription<{
      encode([_token, _amount]: [string, BigNumberish]): string;
    }>;

    calcSingleOutGivenPoolIn: TypedFunctionDescription<{
      encode([_token, _amount]: [string, BigNumberish]): string;
    }>;

    calcTokensForAmount: TypedFunctionDescription<{
      encode([_amount]: [BigNumberish]): string;
    }>;
  };

  events: {};
}

export class LibPoolMath extends Contract {
  connect(signerOrProvider: Signer | Provider | string): LibPoolMath;
  attach(addressOrName: string): LibPoolMath;
  deployed(): Promise<LibPoolMath>;

  on(event: EventFilter | string, listener: Listener): LibPoolMath;
  once(event: EventFilter | string, listener: Listener): LibPoolMath;
  addListener(eventName: EventFilter | string, listener: Listener): LibPoolMath;
  removeAllListeners(eventName: EventFilter | string): LibPoolMath;
  removeListener(eventName: any, listener: Listener): LibPoolMath;

  interface: LibPoolMathInterface;

  functions: {
    calcPoolInGivenSingleOut(
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    calcPoolOutGivenSingleIn(
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    calcSingleInGivenPoolOut(
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    calcSingleOutGivenPoolIn(
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    calcTokensForAmount(
      _amount: BigNumberish
    ): Promise<{
      tokens: string[];
      amounts: BigNumber[];
      0: string[];
      1: BigNumber[];
    }>;
  };

  calcPoolInGivenSingleOut(
    _token: string,
    _amount: BigNumberish
  ): Promise<BigNumber>;

  calcPoolOutGivenSingleIn(
    _token: string,
    _amount: BigNumberish
  ): Promise<BigNumber>;

  calcSingleInGivenPoolOut(
    _token: string,
    _amount: BigNumberish
  ): Promise<BigNumber>;

  calcSingleOutGivenPoolIn(
    _token: string,
    _amount: BigNumberish
  ): Promise<BigNumber>;

  calcTokensForAmount(
    _amount: BigNumberish
  ): Promise<{
    tokens: string[];
    amounts: BigNumber[];
    0: string[];
    1: BigNumber[];
  }>;

  filters: {};

  estimate: {
    calcPoolInGivenSingleOut(
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    calcPoolOutGivenSingleIn(
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    calcSingleInGivenPoolOut(
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    calcSingleOutGivenPoolIn(
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    calcTokensForAmount(_amount: BigNumberish): Promise<BigNumber>;
  };
}
