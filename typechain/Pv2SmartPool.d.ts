/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface Pv2SmartPoolInterface extends Interface {
  functions: {
    allowance: TypedFunctionDescription<{
      encode([_src, _dst]: [string, string]): string;
    }>;

    applyAddToken: TypedFunctionDescription<{ encode([]: []): string }>;

    approve: TypedFunctionDescription<{
      encode([_dst, _amount]: [string, BigNumberish]): string;
    }>;

    approveTokens: TypedFunctionDescription<{ encode([]: []): string }>;

    balanceOf: TypedFunctionDescription<{ encode([_whom]: [string]): string }>;

    bind: TypedFunctionDescription<{
      encode([_token, _balance, _denorm]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    calcPoolInGivenSingleOut: TypedFunctionDescription<{
      encode([_token, _amount]: [string, BigNumberish]): string;
    }>;

    calcPoolOutGivenSingleIn: TypedFunctionDescription<{
      encode([_token, _amount]: [string, BigNumberish]): string;
    }>;

    calcSingleInGivenPoolOut: TypedFunctionDescription<{
      encode([_token, _amount]: [string, BigNumberish]): string;
    }>;

    calcSingleOutGivenPoolIn: TypedFunctionDescription<{
      encode([_token, _amount]: [string, BigNumberish]): string;
    }>;

    calcTokensForAmount: TypedFunctionDescription<{
      encode([_amount]: [BigNumberish]): string;
    }>;

    chargeOutstandingAnnualFee: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    commitAddToken: TypedFunctionDescription<{
      encode([_token, _balance, _denormalizedWeight]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    createPool: TypedFunctionDescription<{
      encode([initialSupply]: [BigNumberish]): string;
    }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    decreaseApproval: TypedFunctionDescription<{
      encode([_dst, _amount]: [string, BigNumberish]): string;
    }>;

    exitPool: TypedFunctionDescription<{
      encode([_amount, _minAmountsOut]: [BigNumberish, BigNumberish[]]): string;
    }>;

    exitPoolTakingloss: TypedFunctionDescription<{
      encode([_amount, _lossTokens]: [BigNumberish, string[]]): string;
    }>;

    exitswapExternAmountOut: TypedFunctionDescription<{
      encode([_token, _tokenAmountOut, _maxPoolAmountIn]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    exitswapPoolAmountIn: TypedFunctionDescription<{
      encode([_token, _poolAmountIn, _minAmountOut]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    finalizeSmartPool: TypedFunctionDescription<{ encode([]: []): string }>;

    getAnnualFee: TypedFunctionDescription<{ encode([]: []): string }>;

    getBPool: TypedFunctionDescription<{ encode([]: []): string }>;

    getCap: TypedFunctionDescription<{ encode([]: []): string }>;

    getCircuitBreaker: TypedFunctionDescription<{ encode([]: []): string }>;

    getController: TypedFunctionDescription<{ encode([]: []): string }>;

    getDenormalizedWeight: TypedFunctionDescription<{
      encode([_token]: [string]): string;
    }>;

    getDenormalizedWeights: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getEndBlock: TypedFunctionDescription<{ encode([]: []): string }>;

    getFeeRecipient: TypedFunctionDescription<{ encode([]: []): string }>;

    getJoinExitEnabled: TypedFunctionDescription<{ encode([]: []): string }>;

    getNewToken: TypedFunctionDescription<{ encode([]: []): string }>;

    getNewWeights: TypedFunctionDescription<{ encode([]: []): string }>;

    getPublicSwapSetter: TypedFunctionDescription<{ encode([]: []): string }>;

    getStartBlock: TypedFunctionDescription<{ encode([]: []): string }>;

    getStartWeights: TypedFunctionDescription<{ encode([]: []): string }>;

    getSwapFee: TypedFunctionDescription<{ encode([]: []): string }>;

    getTokenBinder: TypedFunctionDescription<{ encode([]: []): string }>;

    getTokens: TypedFunctionDescription<{ encode([]: []): string }>;

    increaseApproval: TypedFunctionDescription<{
      encode([_dst, _amount]: [string, BigNumberish]): string;
    }>;

    init: TypedFunctionDescription<{
      encode([_bPool, _name, _symbol, _initialSupply]: [
        string,
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    isPublicSwap: TypedFunctionDescription<{ encode([]: []): string }>;

    joinPool: TypedFunctionDescription<{
      encode([_amount]: [BigNumberish]): string;
    }>;

    joinswapExternAmountIn: TypedFunctionDescription<{
      encode([_token, _amountIn, _minPoolAmountOut]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    joinswapPoolAmountOut: TypedFunctionDescription<{
      encode([_token, _amountOut, _maxAmountIn]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    name: TypedFunctionDescription<{ encode([]: []): string }>;

    pokeWeights: TypedFunctionDescription<{ encode([]: []): string }>;

    rebind: TypedFunctionDescription<{
      encode([_token, _balance, _denorm]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    removeToken: TypedFunctionDescription<{
      encode([_token]: [string]): string;
    }>;

    setAnnualFee: TypedFunctionDescription<{
      encode([_newFee]: [BigNumberish]): string;
    }>;

    setCap: TypedFunctionDescription<{
      encode([_cap]: [BigNumberish]): string;
    }>;

    setCircuitBreaker: TypedFunctionDescription<{
      encode([_newCircuitBreaker]: [string]): string;
    }>;

    setController: TypedFunctionDescription<{
      encode([_controller]: [string]): string;
    }>;

    setFeeRecipient: TypedFunctionDescription<{
      encode([_newRecipient]: [string]): string;
    }>;

    setJoinExitEnabled: TypedFunctionDescription<{
      encode([_newValue]: [boolean]): string;
    }>;

    setPublicSwap: TypedFunctionDescription<{
      encode([_public]: [boolean]): string;
    }>;

    setPublicSwapSetter: TypedFunctionDescription<{
      encode([_newPublicSwapSetter]: [string]): string;
    }>;

    setSwapFee: TypedFunctionDescription<{
      encode([_swapFee]: [BigNumberish]): string;
    }>;

    setTokenBinder: TypedFunctionDescription<{
      encode([_newTokenBinder]: [string]): string;
    }>;

    symbol: TypedFunctionDescription<{ encode([]: []): string }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    transfer: TypedFunctionDescription<{
      encode([_dst, _amount]: [string, BigNumberish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([_src, _dst, _amount]: [string, string, BigNumberish]): string;
    }>;

    tripCircuitBreaker: TypedFunctionDescription<{ encode([]: []): string }>;

    unbind: TypedFunctionDescription<{ encode([_token]: [string]): string }>;

    updateWeight: TypedFunctionDescription<{
      encode([_token, _newWeight]: [string, BigNumberish]): string;
    }>;

    updateWeightsGradually: TypedFunctionDescription<{
      encode([_newWeights, _startBlock, _endBlock]: [
        BigNumberish[],
        BigNumberish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([_src, _dst, _amount]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    CapChanged: TypedEventDescription<{
      encodeTopics([setter, oldCap, newCap]: [
        string | null,
        null,
        null
      ]): string[];
    }>;

    CircuitBreakerChanged: TypedEventDescription<{
      encodeTopics([_oldCircuitBreaker, _newCircuitBreaker]: [
        string | null,
        string | null
      ]): string[];
    }>;

    CircuitBreakerTripped: TypedEventDescription<{
      encodeTopics([]: []): string[];
    }>;

    ControllerChanged: TypedEventDescription<{
      encodeTopics([previousController, newController]: [
        string | null,
        string | null
      ]): string[];
    }>;

    JoinExitEnabledChanged: TypedEventDescription<{
      encodeTopics([setter, oldValue, newValue]: [
        string | null,
        null,
        null
      ]): string[];
    }>;

    PublicSwapSet: TypedEventDescription<{
      encodeTopics([setter, value]: [string | null, boolean | null]): string[];
    }>;

    PublicSwapSetterChanged: TypedEventDescription<{
      encodeTopics([previousSetter, newSetter]: [
        string | null,
        string | null
      ]): string[];
    }>;

    SwapFeeSet: TypedEventDescription<{
      encodeTopics([setter, newFee]: [string | null, null]): string[];
    }>;

    TokenBinderChanged: TypedEventDescription<{
      encodeTopics([previousTokenBinder, newTokenBinder]: [
        string | null,
        string | null
      ]): string[];
    }>;

    TokensApproved: TypedEventDescription<{ encodeTopics([]: []): string[] }>;

    Transfer: TypedEventDescription<{
      encodeTopics([_src, _dst, _amount]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class Pv2SmartPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Pv2SmartPool;
  attach(addressOrName: string): Pv2SmartPool;
  deployed(): Promise<Pv2SmartPool>;

  on(event: EventFilter | string, listener: Listener): Pv2SmartPool;
  once(event: EventFilter | string, listener: Listener): Pv2SmartPool;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): Pv2SmartPool;
  removeAllListeners(eventName: EventFilter | string): Pv2SmartPool;
  removeListener(eventName: any, listener: Listener): Pv2SmartPool;

  interface: Pv2SmartPoolInterface;

  functions: {
    allowance(_src: string, _dst: string): Promise<BigNumber>;

    applyAddToken(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    approve(
      _dst: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    approveTokens(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    balanceOf(_whom: string): Promise<BigNumber>;

    bind(
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    calcPoolInGivenSingleOut(
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    calcPoolOutGivenSingleIn(
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    calcSingleInGivenPoolOut(
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    calcSingleOutGivenPoolIn(
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    calcTokensForAmount(
      _amount: BigNumberish
    ): Promise<{
      tokens: string[];
      amounts: BigNumber[];
      0: string[];
      1: BigNumber[];
    }>;

    chargeOutstandingAnnualFee(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    commitAddToken(
      _token: string,
      _balance: BigNumberish,
      _denormalizedWeight: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    createPool(initialSupply: BigNumberish): Promise<void>;

    decimals(): Promise<number>;

    decreaseApproval(
      _dst: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "exitPool(uint256,uint256[])"(
      _amount: BigNumberish,
      _minAmountsOut: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "exitPool(uint256)"(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    exitPoolTakingloss(
      _amount: BigNumberish,
      _lossTokens: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    exitswapExternAmountOut(
      _token: string,
      _tokenAmountOut: BigNumberish,
      _maxPoolAmountIn: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    exitswapPoolAmountIn(
      _token: string,
      _poolAmountIn: BigNumberish,
      _minAmountOut: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    finalizeSmartPool(): Promise<void>;

    getAnnualFee(): Promise<BigNumber>;

    getBPool(): Promise<string>;

    getCap(): Promise<BigNumber>;

    getCircuitBreaker(): Promise<string>;

    getController(): Promise<string>;

    getDenormalizedWeight(_token: string): Promise<BigNumber>;

    getDenormalizedWeights(): Promise<BigNumber[]>;

    getEndBlock(): Promise<BigNumber>;

    getFeeRecipient(): Promise<string>;

    getJoinExitEnabled(): Promise<boolean>;

    getNewToken(): Promise<{
      addr: string;
      isCommitted: boolean;
      balance: BigNumber;
      denorm: BigNumber;
      commitBlock: BigNumber;
      0: string;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    getNewWeights(): Promise<BigNumber[]>;

    getPublicSwapSetter(): Promise<string>;

    getStartBlock(): Promise<BigNumber>;

    getStartWeights(): Promise<BigNumber[]>;

    getSwapFee(): Promise<BigNumber>;

    getTokenBinder(): Promise<string>;

    getTokens(): Promise<string[]>;

    increaseApproval(
      _dst: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    init(
      _bPool: string,
      _name: string,
      _symbol: string,
      _initialSupply: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isPublicSwap(): Promise<boolean>;

    "joinPool(uint256)"(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "joinPool(uint256,uint256[])"(
      _amount: BigNumberish,
      _maxAmountsIn: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    joinswapExternAmountIn(
      _token: string,
      _amountIn: BigNumberish,
      _minPoolAmountOut: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    joinswapPoolAmountOut(
      _token: string,
      _amountOut: BigNumberish,
      _maxAmountIn: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    name(): Promise<string>;

    pokeWeights(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    rebind(
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeToken(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAnnualFee(
      _newFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setCap(
      _cap: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setCircuitBreaker(
      _newCircuitBreaker: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setController(
      _controller: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      _newRecipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setJoinExitEnabled(
      _newValue: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setPublicSwap(
      _public: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setPublicSwapSetter(
      _newPublicSwapSetter: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setSwapFee(
      _swapFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setTokenBinder(
      _newTokenBinder: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    symbol(): Promise<string>;

    totalSupply(): Promise<BigNumber>;

    transfer(
      _dst: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferFrom(
      _src: string,
      _dst: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    tripCircuitBreaker(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    unbind(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateWeight(
      _token: string,
      _newWeight: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateWeightsGradually(
      _newWeights: BigNumberish[],
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  allowance(_src: string, _dst: string): Promise<BigNumber>;

  applyAddToken(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  approve(
    _dst: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  approveTokens(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  balanceOf(_whom: string): Promise<BigNumber>;

  bind(
    _token: string,
    _balance: BigNumberish,
    _denorm: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  calcPoolInGivenSingleOut(
    _token: string,
    _amount: BigNumberish
  ): Promise<BigNumber>;

  calcPoolOutGivenSingleIn(
    _token: string,
    _amount: BigNumberish
  ): Promise<BigNumber>;

  calcSingleInGivenPoolOut(
    _token: string,
    _amount: BigNumberish
  ): Promise<BigNumber>;

  calcSingleOutGivenPoolIn(
    _token: string,
    _amount: BigNumberish
  ): Promise<BigNumber>;

  calcTokensForAmount(
    _amount: BigNumberish
  ): Promise<{
    tokens: string[];
    amounts: BigNumber[];
    0: string[];
    1: BigNumber[];
  }>;

  chargeOutstandingAnnualFee(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  commitAddToken(
    _token: string,
    _balance: BigNumberish,
    _denormalizedWeight: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  createPool(initialSupply: BigNumberish): Promise<void>;

  decimals(): Promise<number>;

  decreaseApproval(
    _dst: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "exitPool(uint256,uint256[])"(
    _amount: BigNumberish,
    _minAmountsOut: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "exitPool(uint256)"(
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  exitPoolTakingloss(
    _amount: BigNumberish,
    _lossTokens: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  exitswapExternAmountOut(
    _token: string,
    _tokenAmountOut: BigNumberish,
    _maxPoolAmountIn: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  exitswapPoolAmountIn(
    _token: string,
    _poolAmountIn: BigNumberish,
    _minAmountOut: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  finalizeSmartPool(): Promise<void>;

  getAnnualFee(): Promise<BigNumber>;

  getBPool(): Promise<string>;

  getCap(): Promise<BigNumber>;

  getCircuitBreaker(): Promise<string>;

  getController(): Promise<string>;

  getDenormalizedWeight(_token: string): Promise<BigNumber>;

  getDenormalizedWeights(): Promise<BigNumber[]>;

  getEndBlock(): Promise<BigNumber>;

  getFeeRecipient(): Promise<string>;

  getJoinExitEnabled(): Promise<boolean>;

  getNewToken(): Promise<{
    addr: string;
    isCommitted: boolean;
    balance: BigNumber;
    denorm: BigNumber;
    commitBlock: BigNumber;
    0: string;
    1: boolean;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  getNewWeights(): Promise<BigNumber[]>;

  getPublicSwapSetter(): Promise<string>;

  getStartBlock(): Promise<BigNumber>;

  getStartWeights(): Promise<BigNumber[]>;

  getSwapFee(): Promise<BigNumber>;

  getTokenBinder(): Promise<string>;

  getTokens(): Promise<string[]>;

  increaseApproval(
    _dst: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  init(
    _bPool: string,
    _name: string,
    _symbol: string,
    _initialSupply: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isPublicSwap(): Promise<boolean>;

  "joinPool(uint256)"(
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "joinPool(uint256,uint256[])"(
    _amount: BigNumberish,
    _maxAmountsIn: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  joinswapExternAmountIn(
    _token: string,
    _amountIn: BigNumberish,
    _minPoolAmountOut: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  joinswapPoolAmountOut(
    _token: string,
    _amountOut: BigNumberish,
    _maxAmountIn: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  name(): Promise<string>;

  pokeWeights(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  rebind(
    _token: string,
    _balance: BigNumberish,
    _denorm: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeToken(
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAnnualFee(
    _newFee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setCap(
    _cap: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setCircuitBreaker(
    _newCircuitBreaker: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setController(
    _controller: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    _newRecipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setJoinExitEnabled(
    _newValue: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setPublicSwap(
    _public: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setPublicSwapSetter(
    _newPublicSwapSetter: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setSwapFee(
    _swapFee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setTokenBinder(
    _newTokenBinder: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  symbol(): Promise<string>;

  totalSupply(): Promise<BigNumber>;

  transfer(
    _dst: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferFrom(
    _src: string,
    _dst: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  tripCircuitBreaker(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  unbind(
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateWeight(
    _token: string,
    _newWeight: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateWeightsGradually(
    _newWeights: BigNumberish[],
    _startBlock: BigNumberish,
    _endBlock: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Approval(
      _src: string | null,
      _dst: string | null,
      _amount: null
    ): EventFilter;

    CapChanged(setter: string | null, oldCap: null, newCap: null): EventFilter;

    CircuitBreakerChanged(
      _oldCircuitBreaker: string | null,
      _newCircuitBreaker: string | null
    ): EventFilter;

    CircuitBreakerTripped(): EventFilter;

    ControllerChanged(
      previousController: string | null,
      newController: string | null
    ): EventFilter;

    JoinExitEnabledChanged(
      setter: string | null,
      oldValue: null,
      newValue: null
    ): EventFilter;

    PublicSwapSet(setter: string | null, value: boolean | null): EventFilter;

    PublicSwapSetterChanged(
      previousSetter: string | null,
      newSetter: string | null
    ): EventFilter;

    SwapFeeSet(setter: string | null, newFee: null): EventFilter;

    TokenBinderChanged(
      previousTokenBinder: string | null,
      newTokenBinder: string | null
    ): EventFilter;

    TokensApproved(): EventFilter;

    Transfer(
      _src: string | null,
      _dst: string | null,
      _amount: null
    ): EventFilter;
  };

  estimate: {
    allowance(_src: string, _dst: string): Promise<BigNumber>;

    applyAddToken(): Promise<BigNumber>;

    approve(_dst: string, _amount: BigNumberish): Promise<BigNumber>;

    approveTokens(): Promise<BigNumber>;

    balanceOf(_whom: string): Promise<BigNumber>;

    bind(
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish
    ): Promise<BigNumber>;

    calcPoolInGivenSingleOut(
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    calcPoolOutGivenSingleIn(
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    calcSingleInGivenPoolOut(
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    calcSingleOutGivenPoolIn(
      _token: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    calcTokensForAmount(_amount: BigNumberish): Promise<BigNumber>;

    chargeOutstandingAnnualFee(): Promise<BigNumber>;

    commitAddToken(
      _token: string,
      _balance: BigNumberish,
      _denormalizedWeight: BigNumberish
    ): Promise<BigNumber>;

    createPool(initialSupply: BigNumberish): Promise<BigNumber>;

    decimals(): Promise<BigNumber>;

    decreaseApproval(_dst: string, _amount: BigNumberish): Promise<BigNumber>;

    exitPool(
      _amount: BigNumberish,
      _minAmountsOut: BigNumberish[]
    ): Promise<BigNumber>;

    exitPoolTakingloss(
      _amount: BigNumberish,
      _lossTokens: string[]
    ): Promise<BigNumber>;

    exitswapExternAmountOut(
      _token: string,
      _tokenAmountOut: BigNumberish,
      _maxPoolAmountIn: BigNumberish
    ): Promise<BigNumber>;

    exitswapPoolAmountIn(
      _token: string,
      _poolAmountIn: BigNumberish,
      _minAmountOut: BigNumberish
    ): Promise<BigNumber>;

    finalizeSmartPool(): Promise<BigNumber>;

    getAnnualFee(): Promise<BigNumber>;

    getBPool(): Promise<BigNumber>;

    getCap(): Promise<BigNumber>;

    getCircuitBreaker(): Promise<BigNumber>;

    getController(): Promise<BigNumber>;

    getDenormalizedWeight(_token: string): Promise<BigNumber>;

    getDenormalizedWeights(): Promise<BigNumber>;

    getEndBlock(): Promise<BigNumber>;

    getFeeRecipient(): Promise<BigNumber>;

    getJoinExitEnabled(): Promise<BigNumber>;

    getNewToken(): Promise<BigNumber>;

    getNewWeights(): Promise<BigNumber>;

    getPublicSwapSetter(): Promise<BigNumber>;

    getStartBlock(): Promise<BigNumber>;

    getStartWeights(): Promise<BigNumber>;

    getSwapFee(): Promise<BigNumber>;

    getTokenBinder(): Promise<BigNumber>;

    getTokens(): Promise<BigNumber>;

    increaseApproval(_dst: string, _amount: BigNumberish): Promise<BigNumber>;

    init(
      _bPool: string,
      _name: string,
      _symbol: string,
      _initialSupply: BigNumberish
    ): Promise<BigNumber>;

    isPublicSwap(): Promise<BigNumber>;

    joinPool(_amount: BigNumberish): Promise<BigNumber>;

    joinswapExternAmountIn(
      _token: string,
      _amountIn: BigNumberish,
      _minPoolAmountOut: BigNumberish
    ): Promise<BigNumber>;

    joinswapPoolAmountOut(
      _token: string,
      _amountOut: BigNumberish,
      _maxAmountIn: BigNumberish
    ): Promise<BigNumber>;

    name(): Promise<BigNumber>;

    pokeWeights(): Promise<BigNumber>;

    rebind(
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish
    ): Promise<BigNumber>;

    removeToken(_token: string): Promise<BigNumber>;

    setAnnualFee(_newFee: BigNumberish): Promise<BigNumber>;

    setCap(_cap: BigNumberish): Promise<BigNumber>;

    setCircuitBreaker(_newCircuitBreaker: string): Promise<BigNumber>;

    setController(_controller: string): Promise<BigNumber>;

    setFeeRecipient(_newRecipient: string): Promise<BigNumber>;

    setJoinExitEnabled(_newValue: boolean): Promise<BigNumber>;

    setPublicSwap(_public: boolean): Promise<BigNumber>;

    setPublicSwapSetter(_newPublicSwapSetter: string): Promise<BigNumber>;

    setSwapFee(_swapFee: BigNumberish): Promise<BigNumber>;

    setTokenBinder(_newTokenBinder: string): Promise<BigNumber>;

    symbol(): Promise<BigNumber>;

    totalSupply(): Promise<BigNumber>;

    transfer(_dst: string, _amount: BigNumberish): Promise<BigNumber>;

    transferFrom(
      _src: string,
      _dst: string,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    tripCircuitBreaker(): Promise<BigNumber>;

    unbind(_token: string): Promise<BigNumber>;

    updateWeight(_token: string, _newWeight: BigNumberish): Promise<BigNumber>;

    updateWeightsGradually(
      _newWeights: BigNumberish[],
      _startBlock: BigNumberish,
      _endBlock: BigNumberish
    ): Promise<BigNumber>;
  };
}
